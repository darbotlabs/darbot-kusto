{"version":3,"file":"connectionBuilder.js","sourceRoot":"","sources":["../../src/connectionBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { DeviceCodeInfo, InteractiveBrowserCredentialInBrowserOptions, InteractiveBrowserCredentialNodeOptions, TokenCredential } from \"@azure/identity\";\nimport { KustoConnectionStringBuilderBase } from \"./connectionBuilderBase.js\";\n\n/*\n * A builder for Kusto connection strings\n * For browsers use withUserPrompt or provide the token yourself using withTokenProvider\n */\nexport class KustoConnectionStringBuilder extends KustoConnectionStringBuilderBase {\n    static readonly DefaultDatabaseName = \"NetDefaultDB\";\n    static readonly SecretReplacement = \"****\";\n\n    static withAadUserPasswordAuthentication(connectionString: string, userId: string, password: string, authorityId?: string): KustoConnectionStringBuilder {\n        if (userId.trim().length === 0) throw new Error(\"Invalid user\");\n        if (password.trim().length === 0) throw new Error(\"Invalid password\");\n\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n        kcsb.aadUserId = userId;\n        kcsb.password = password;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n\n        return kcsb;\n    }\n\n    static withAadApplicationKeyAuthentication(connectionString: string, aadAppId: string, appKey: string, authorityId?: string): KustoConnectionStringBuilder {\n        if (aadAppId.trim().length === 0) throw new Error(\"Invalid app id\");\n        if (appKey.trim().length === 0) throw new Error(\"Invalid app key\");\n\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n        kcsb.applicationClientId = aadAppId;\n        kcsb.applicationKey = appKey;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n\n        return kcsb;\n    }\n\n    static withAadApplicationCertificateAuthentication(\n        connectionString: string,\n        aadAppId: string,\n        applicationCertificatePrivateKey?: string,\n        authorityId?: string,\n        applicationCertificateSendX5c?: boolean,\n        applicationCertificatePrivatePath?: string,\n    ): KustoConnectionStringBuilder {\n        if (aadAppId.trim().length === 0) throw new Error(\"Invalid app id\");\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        if (!applicationCertificatePrivatePath) {\n            if (!applicationCertificatePrivateKey) {\n                throw new Error(\"withAadApplicationCertificateAuthentication should specify either a cert key or a path\");\n            }\n\n            if (applicationCertificatePrivateKey.trim().length === 0) throw new Error(\"Invalid certificate key\");\n            kcsb.applicationCertificatePrivateKey = applicationCertificatePrivateKey;\n        } else {\n            if (applicationCertificatePrivateKey) {\n                throw new Error(\"withAadApplicationCertificateAuthentication should specify either a cert key or a path\");\n            }\n\n            kcsb.applicationCertificatePath = applicationCertificatePrivatePath;\n        }\n\n        kcsb.aadFederatedSecurity = true;\n        kcsb.applicationClientId = aadAppId;\n        kcsb.applicationCertificateSendX5c = applicationCertificateSendX5c;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n\n        return kcsb;\n    }\n\n    static withAadDeviceAuthentication(\n        connectionString: string,\n        authorityId?: string,\n        deviceCodeCallback?: (response: DeviceCodeInfo) => void,\n    ): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n        kcsb.deviceCodeCallback = deviceCodeCallback;\n        kcsb.useDeviceCodeAuth = true;\n\n        return kcsb;\n    }\n\n    private static withAadManagedIdentities(\n        connectionString: string,\n        msiClientId?: string,\n        authorityId?: string,\n        timeoutMs?: number,\n    ): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n        kcsb.msiClientId = msiClientId;\n        kcsb.timeoutMs = timeoutMs;\n        kcsb.useManagedIdentityAuth = true;\n\n        return kcsb;\n    }\n\n    static withSystemManagedIdentity(connectionString: string, authorityId?: string, timeoutMs?: number): KustoConnectionStringBuilder {\n        return this.withAadManagedIdentities(connectionString, undefined, authorityId, timeoutMs);\n    }\n\n    static withUserManagedIdentity(connectionString: string, msiClientId: string, authorityId?: string, timeoutMs?: number): KustoConnectionStringBuilder {\n        return this.withAadManagedIdentities(connectionString, msiClientId, authorityId, timeoutMs);\n    }\n\n    static withAzLoginIdentity(connectionString: string, authorityId?: string, timeoutMs?: number): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n\n        kcsb.useAzLoginAuth = true;\n        if (authorityId) {\n            kcsb.authorityId = authorityId;\n        }\n        kcsb.timeoutMs = timeoutMs;\n\n        return kcsb;\n    }\n\n    static withAccessToken(connectionString: string, accessToken: string): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n\n        kcsb.accessToken = accessToken;\n\n        return kcsb;\n    }\n\n    static withTokenProvider(connectionString: string, tokenProvider: () => Promise<string>): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n\n        kcsb.tokenProvider = tokenProvider;\n\n        return kcsb;\n    }\n\n    /**\n     * Use InteractiveBrowserCredentialNodeOptions in Node.JS and InteractiveBrowserCredentialInBrowserOptions in browser\n     * For browser cors issue: you need to visit your app registration and update the redirect URI you're using to the type spa (for \"single page application\").\n     * See: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity/test/manual/interactive-browser-credential\n     */\n    static withUserPrompt(\n        connectionString: string,\n        options?: InteractiveBrowserCredentialNodeOptions | InteractiveBrowserCredentialInBrowserOptions,\n        timeoutMs?: number,\n    ): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        const { tenantId, clientId } = (options as InteractiveBrowserCredentialNodeOptions) || {};\n        if (clientId) {\n            throw new Error(\"clientId should be empty as it is retrived from the service management endpoint\");\n        }\n\n        kcsb.aadFederatedSecurity = true;\n        kcsb.useUserPromptAuth = true;\n        if (tenantId) {\n            kcsb.authorityId = tenantId;\n        } else if (options) {\n            options.tenantId = kcsb.authorityId;\n        }\n\n        kcsb.timeoutMs = timeoutMs;\n\n        return kcsb;\n    }\n\n    static withTokenCredential(connectionString: string, credential: TokenCredential): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.tokenCredential = credential;\n\n        return kcsb;\n    }\n\n    static fromExisting(other: KustoConnectionStringBuilderBase): KustoConnectionStringBuilderBase {\n        return Object.assign(new KustoConnectionStringBuilder(other.toString(false)), other);\n    }\n}\n\nexport default KustoConnectionStringBuilder;\n"]}