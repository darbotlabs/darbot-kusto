{"version":3,"file":"connectionBuilder.browser.js","sourceRoot":"","sources":["../../src/connectionBuilder.browser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { DeviceCodeInfo, InteractiveBrowserCredentialInBrowserOptions, InteractiveBrowserCredentialNodeOptions, TokenCredential } from \"@azure/identity\";\nimport KustoConnectionStringBuilderBase from \"./connectionBuilderBase.js\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nexport class KustoConnectionStringBuilder extends KustoConnectionStringBuilderBase {\n    static readonly DefaultDatabaseName = \"NetDefaultDB\";\n    static readonly SecretReplacement = \"****\";\n\n    static withAadUserPasswordAuthentication(\n        _connectionString: string,\n        _userId: string,\n        _password: string,\n        _authorityId?: string,\n    ): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withAadApplicationKeyAuthentication(\n        _connectionString: string,\n        _aadAppId: string,\n        _appKey: string,\n        _authorityId?: string,\n    ): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withAadApplicationCertificateAuthentication(\n        _connectionString: string,\n        _aadAppId: string,\n        _applicationCertificatePrivateKey?: string,\n        _authorityId?: string,\n        _applicationCertificateSendX5c?: boolean,\n        _applicationCertificatePath?: string,\n    ): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withAadDeviceAuthentication(\n        _connectionString: string,\n        _authorityId?: string,\n        _deviceCodeCallback?: (response: DeviceCodeInfo) => void,\n    ): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withSystemManagedIdentity(_connectionString: string, _authorityId?: string, _timeoutMs?: number): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withUserManagedIdentity(_connectionString: string, _msiClientId: string, _authorityId?: string, _timeoutMs?: number): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withAzLoginIdentity(_connectionString: string, _authorityId?: string, _timeoutMs?: number): KustoConnectionStringBuilder {\n        throw new Error(\"Not supported in browser - use withUserPrompt instead\");\n    }\n\n    static withAccessToken(connectionString: string, accessToken: string): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n\n        kcsb.accessToken = accessToken;\n\n        return kcsb;\n    }\n\n    static withTokenProvider(connectionString: string, tokenProvider: () => Promise<string>): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.aadFederatedSecurity = true;\n\n        kcsb.tokenProvider = tokenProvider;\n\n        return kcsb;\n    }\n\n    static withUserPrompt(\n        connectionString: string,\n        interactiveCredentialOptions: InteractiveBrowserCredentialNodeOptions | InteractiveBrowserCredentialInBrowserOptions,\n        timeoutMs?: number,\n    ): KustoConnectionStringBuilder {\n        if (!interactiveCredentialOptions) {\n            throw new Error(\n                \"Invalid parameters - You must provide interactiveCredentialOptions={clientId: string, redirectUri:string} to authenticate with user prompt in browser.\",\n            );\n        }\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        const { redirectUri, clientId, tenantId } = interactiveCredentialOptions as InteractiveBrowserCredentialInBrowserOptions;\n        if (!clientId) {\n            throw new Error(\"Invalid parameters - You must provide your SPA application client id to authenticate against\");\n        }\n\n        if (!redirectUri) {\n            throw new Error(\"Invalid parameters - You must provide a redirectUri registered on the SPA app\");\n        }\n\n        if (tenantId) {\n            kcsb.authorityId = tenantId;\n        } else {\n            interactiveCredentialOptions.tenantId = kcsb.authorityId;\n        }\n\n        kcsb.interactiveCredentialOptions = interactiveCredentialOptions;\n        kcsb.aadFederatedSecurity = true;\n        kcsb.applicationClientId = clientId;\n        kcsb.useUserPromptAuth = true;\n\n        kcsb.timeoutMs = timeoutMs;\n\n        return kcsb;\n    }\n\n    static withTokenCredential(connectionString: string, credential: TokenCredential): KustoConnectionStringBuilder {\n        const kcsb = new KustoConnectionStringBuilder(connectionString);\n        kcsb.tokenCredential = credential;\n\n        return kcsb;\n    }\n\n    static fromExisting(other: KustoConnectionStringBuilderBase): KustoConnectionStringBuilderBase {\n        return Object.assign(new KustoConnectionStringBuilder(other.toString(false)), other);\n    }\n}\n\nexport default KustoConnectionStringBuilder;\n"]}