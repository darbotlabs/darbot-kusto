{"version":3,"file":"connectionBuilderBase.js","sourceRoot":"","sources":["../../src/connectionBuilderBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { DeviceCodeInfo, InteractiveBrowserCredentialInBrowserOptions, InteractiveBrowserCredentialNodeOptions, TokenCredential } from \"@azure/identity\";\nimport { KeyOfType } from \"./typeUtilts.js\";\nimport { ClientDetails } from \"./clientDetails.js\";\n\ninterface MappingType {\n    mappedTo: string;\n    validNames: string[];\n    isSecret?: boolean;\n    isBool?: boolean;\n}\n\ntype KcsbMappedKeys = KeyOfType<KustoConnectionStringBuilderBase, string | boolean | undefined>;\n\n// This type gurantess that we don't have properties in KeywordMapping that don't exist in KustoConnectionStringBuilder\ntype KeywordMappingRecordType = Partial<Record<KcsbMappedKeys, MappingType>>;\n\nexport const KeywordMapping: KeywordMappingRecordType = Object.freeze<Readonly<KeywordMappingRecordType>>({\n    dataSource: {\n        mappedTo: \"Data Source\",\n        validNames: [\"data source\", \"addr\", \"address\", \"network address\", \"server\"],\n    },\n    aadFederatedSecurity: {\n        mappedTo: \"AAD Federated Security\",\n        validNames: [\"aad federated security\", \"federated security\", \"federated\", \"fed\", \"aadfed\"],\n        isBool: true,\n    },\n    initialCatalog: {\n        mappedTo: \"Initial Catalog\",\n        validNames: [\"initial catalog\", \"database\"],\n    },\n    aadUserId: {\n        mappedTo: \"AAD User ID\",\n        validNames: [\"aad user id\"],\n    },\n    password: {\n        mappedTo: \"Password\",\n        validNames: [\"password\", \"pwd\"],\n        isSecret: true,\n    },\n    applicationClientId: {\n        mappedTo: \"Application Client Id\",\n        validNames: [\"application client id\", \"appclientid\"],\n    },\n    applicationKey: {\n        mappedTo: \"Application Key\",\n        validNames: [\"application key\", \"appkey\"],\n        isSecret: true,\n    },\n    applicationCertificatePrivateKey: {\n        mappedTo: \"Application Certificate PrivateKey\",\n        validNames: [\"Application Certificate PrivateKey\"],\n        isSecret: true,\n    },\n    applicationCertificateSendX5c: {\n        mappedTo: \"Application Certificate x5c\",\n        validNames: [\"application certificate x5c\", \"Application Certificate Send Public Certificate\", \"Application Certificate SendX5c\", \"SendX5c\"],\n        isBool: true,\n    },\n    authorityId: {\n        mappedTo: \"Authority Id\",\n        validNames: [\"authority id\", \"authorityid\", \"authority\", \"tenantid\", \"tenant\", \"tid\"],\n    },\n});\n\nconst getPropName = (key: string): [string, MappingType] => {\n    const _key = key.trim().toLowerCase();\n\n    for (const keyword of Object.keys(KeywordMapping)) {\n        const k = KeywordMapping[keyword as KcsbMappedKeys];\n        if (!k) {\n            continue;\n        }\n        if (k.validNames.map((n) => n.trim().toLowerCase()).indexOf(_key) >= 0) {\n            return [keyword, k];\n        }\n    }\n    throw new Error(\"Failed to get prop: \" + key);\n};\n\nexport abstract class KustoConnectionStringBuilderBase {\n    static readonly DefaultDatabaseName = \"NetDefaultDB\";\n    static readonly SecretReplacement = \"****\";\n\n    dataSource?: string;\n    aadFederatedSecurity?: boolean;\n    initialCatalog?: string;\n    aadUserId?: string;\n    password?: string;\n    applicationClientId?: string;\n    msiClientId?: string;\n    applicationKey?: string;\n    applicationCertificatePrivateKey?: string;\n    applicationCertificateSendX5c?: boolean;\n    authorityId: string = \"organizations\";\n    deviceCodeCallback?: (response: DeviceCodeInfo) => void;\n    tokenProvider?: () => Promise<string>;\n    timeoutMs?: number;\n    accessToken?: string;\n    useDeviceCodeAuth?: boolean;\n    useUserPromptAuth?: boolean;\n    useAzLoginAuth?: boolean;\n    useManagedIdentityAuth?: boolean;\n    interactiveCredentialOptions?: InteractiveBrowserCredentialNodeOptions | InteractiveBrowserCredentialInBrowserOptions;\n    tokenCredential?: TokenCredential;\n\n    // discarded from to mapped names for security\n    applicationCertificatePath?: string;\n\n    public applicationNameForTracing: string | null = null;\n    public userNameForTracing: string | null = null;\n\n    constructor(connectionString: string) {\n        if (connectionString.trim().length === 0) throw new Error(\"Missing connection string\");\n\n        if (connectionString.endsWith(\"/\") || connectionString.endsWith(\"\\\\\")) {\n            connectionString = connectionString.slice(0, -1);\n        }\n\n        if (!!connectionString && connectionString.split(\";\")[0].indexOf(\"=\") === -1) {\n            connectionString = \"Data Source=\" + connectionString;\n        }\n\n        const params = connectionString.split(\";\");\n        for (const item of params) {\n            const kvp = item.split(\"=\");\n            const [mappingTypeName, mappingType] = getPropName(kvp[0]);\n            if (mappingType.isBool) {\n                this[mappingTypeName as KeyOfType<KustoConnectionStringBuilderBase, boolean | undefined>] = kvp[1].trim().toLowerCase() === \"true\";\n            } else {\n                this[mappingTypeName as KeyOfType<KustoConnectionStringBuilderBase, string | undefined>] = kvp[1]?.trim();\n            }\n        }\n\n        if (!this.initialCatalog) {\n            this.initialCatalog = KustoConnectionStringBuilderBase.DefaultDatabaseName;\n        }\n    }\n\n    public clientDetails(): ClientDetails {\n        return new ClientDetails(this.applicationNameForTracing, this.userNameForTracing);\n    }\n\n    /**\n     * Sets the connector details for tracing purposes.\n     *\n     * @param name  The name of the connector\n     * @param version  The version of the connector\n     * @param appName The name of the containing application\n     * @param appVersion The version of the containing application\n     * @param sendUser Whether to send the username\n     * @param overrideUser Override the username ( if sendUser is True )\n     * @param additionalFields Additional fields to add to the header\n     */\n    public setConnectorDetails(\n        name: string,\n        version: string,\n        appName?: string,\n        appVersion?: string,\n        sendUser: boolean = false,\n        overrideUser?: string,\n        additionalFields?: [string, string][],\n    ): void {\n        const clientDetails = ClientDetails.setConnectorDetails(name, version, appName, appVersion, sendUser, overrideUser, additionalFields);\n\n        this.applicationNameForTracing = clientDetails.applicationNameForTracing;\n        this.userNameForTracing = clientDetails.userNameForTracing;\n    }\n\n    toString(removeSecrets: boolean = true): string {\n        return Object.entries(KeywordMapping)\n            .map(([key, mappingType]) => {\n                const value = this[key as KcsbMappedKeys];\n                if (!mappingType || value === undefined) {\n                    return \"\";\n                }\n                if (mappingType.isSecret && removeSecrets) {\n                    return `${mappingType.mappedTo}=${KustoConnectionStringBuilderBase.SecretReplacement}`;\n                }\n\n                return `${mappingType.mappedTo}=${value.toString()}`;\n            })\n            .filter((x) => x !== \"\")\n            .join(\";\");\n    }\n}\n\nexport default KustoConnectionStringBuilderBase;\n"]}