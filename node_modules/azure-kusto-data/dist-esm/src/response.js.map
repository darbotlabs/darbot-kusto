{"version":3,"file":"response.js","sourceRoot":"","sources":["../../src/response.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KustoResultTable, Table, WellKnownDataSet } from \"./models.js\";\n\ninterface V2DataSetHeaderFrame {\n    FrameType: \"DataSetHeader\";\n    IsProgressive: boolean;\n    Version: string;\n}\n\ninterface V2DataSetTableFrame extends Table {\n    FrameType: \"DataTable\";\n    TableId: number;\n    TableName: string;\n    TableKind: string;\n    Columns: Column[];\n    Rows: any[][];\n}\n\ninterface V2DataSetCompletionFrame {\n    FrameType: \"DataSetCompletion\";\n    HasErrors: boolean;\n    Cancelled: boolean;\n}\n\nexport type V2Frames = (V2DataSetHeaderFrame | V2DataSetTableFrame | V2DataSetCompletionFrame)[];\n\nexport type V1 = { Tables: Table[] };\n\ninterface Column {\n    ColumnName: string;\n    ColumnType: string;\n}\n\nenum ErrorLevels {\n    Warning = 3,\n    Error = 2,\n}\n\nexport abstract class KustoResponseDataSet {\n    tables: KustoResultTable[];\n    tableNames: string[];\n    primaryResults: KustoResultTable[];\n    statusTable?: KustoResultTable;\n    abstract dataSetCompletion: {\n        HasErrors: boolean;\n        OneApiErrors?: any[];\n    } | null;\n\n    abstract getStatusColumn(): string;\n\n    abstract getErrorColumn(): string;\n\n    abstract getCridColumn(): string;\n\n    protected constructor(tables: Table[]) {\n        let _tables = tables;\n\n        if (!Array.isArray(tables)) {\n            _tables = [tables];\n        }\n\n        this.tables = [];\n        this.tableNames = [];\n        this.primaryResults = [];\n        for (const table of _tables) {\n            const resultTable = new KustoResultTable(table);\n            this.tables.push(resultTable);\n            this.tableNames.push(resultTable.name);\n\n            if (resultTable.kind === WellKnownDataSet.PrimaryResult) {\n                this.primaryResults.push(resultTable);\n            } else if (resultTable.kind === WellKnownDataSet.QueryCompletionInformation) {\n                this.statusTable = resultTable;\n            }\n        }\n    }\n\n    getErrorsCount(): { warnings: number; errors: number } {\n        let errors = 0;\n        let warnings = 0;\n\n        if (this.statusTable && this.statusTable._rows.length !== 0) {\n            let minLevel = ErrorLevels.Error;\n            const errorColumn = this.getErrorColumn();\n            for (const row of this.statusTable.rows()) {\n                if (row[errorColumn] <= minLevel) {\n                    if (row[errorColumn] < minLevel) {\n                        minLevel = row[errorColumn];\n                        errors = 1;\n                    } else if (row[errorColumn] === minLevel) {\n                        errors += 1;\n                    }\n                } else if (row[errorColumn] === warnings) {\n                    warnings += 1;\n                }\n            }\n        }\n        if (this.dataSetCompletion && this.dataSetCompletion.HasErrors) {\n            errors += 1;\n        }\n\n        return { warnings, errors };\n    }\n\n    private getErrorsByLevel(errorLevel: ErrorLevels) {\n        const result = [];\n        if (this.statusTable && this.statusTable._rows.length !== 0) {\n            const errorColumn = this.getErrorColumn();\n            const cridColumn = this.getCridColumn();\n            const statusColumn = this.getStatusColumn();\n            for (const row of this.statusTable.rows()) {\n                if (row[errorColumn] <= errorLevel) {\n                    result.push(`Please provide the following data to Kusto: CRID=${row[cridColumn]} Description: ${row[statusColumn]}`);\n                }\n            }\n        }\n        return result;\n    }\n\n    getExceptions(): string[] {\n        const result = this.getErrorsByLevel(ErrorLevels.Error);\n        if (this.dataSetCompletion && this.dataSetCompletion.HasErrors && this.dataSetCompletion.OneApiErrors) {\n            for (const row of this.dataSetCompletion.OneApiErrors) {\n                result.push((row as { error: { \"@message\": string } }).error[\"@message\"]);\n            }\n        }\n        return result;\n    }\n\n    getWarnings(): string[] {\n        return this.getErrorsByLevel(ErrorLevels.Warning);\n    }\n}\n\n// TODO: should only expose 1 response type, versioning should be handled internally\nexport class KustoResponseDataSetV1 extends KustoResponseDataSet {\n    version: string;\n    dataSetCompletion: null = null;\n\n    getStatusColumn() {\n        return \"StatusDescription\";\n    }\n\n    getCridColumn() {\n        return \"ClientActivityId\";\n    }\n\n    getErrorColumn() {\n        return \"Severity\";\n    }\n\n    static getTablesKinds(): { [name: string]: WellKnownDataSet } {\n        return {\n            QueryResult: WellKnownDataSet.PrimaryResult,\n            QueryProperties: WellKnownDataSet.QueryProperties,\n            QueryStatus: WellKnownDataSet.QueryCompletionInformation,\n            PrimaryResult: WellKnownDataSet.PrimaryResult,\n        };\n    }\n\n    constructor(data: V1) {\n        super(data.Tables);\n\n        if (this.tables.length <= 2) {\n            if (this.tables[0].kind === undefined) {\n                this.tables[0].kind = WellKnownDataSet.PrimaryResult;\n                this.primaryResults.push(this.tables[0]);\n            }\n\n            this.tables[0].id = 0;\n\n            if (this.tables.length === 2) {\n                this.tables[1].kind = WellKnownDataSet.QueryProperties;\n                this.tables[1].id = 1;\n            }\n        } else {\n            const toc = this.tables[this.tables.length - 1];\n            toc.kind = WellKnownDataSet.TableOfContents;\n            toc.id = this.tables.length - 1;\n            for (let i = 0; i < this.tables.length - 1; i++) {\n                const current = toc[i] as {\n                    Name: string;\n                    Id: number;\n                    Kind: string;\n                };\n                this.tables[i].name = current.Name;\n                this.tables[i].id = current.Id;\n                this.tables[i].kind = KustoResponseDataSetV1.getTablesKinds()[current.Kind];\n\n                if (this.tables[i].kind === WellKnownDataSet.PrimaryResult) {\n                    this.primaryResults.push(this.tables[i]);\n                }\n            }\n        }\n\n        this.version = \"1.0\";\n    }\n}\n\n// TODO: should only expose 1 response type, versioning should be handled internally\nexport class KustoResponseDataSetV2 extends KustoResponseDataSet {\n    dataSetHeader: V2DataSetHeaderFrame | null;\n    dataSetCompletion: V2DataSetCompletionFrame | null;\n    version: string;\n\n    getStatusColumn() {\n        return \"Payload\";\n    }\n\n    getErrorColumn() {\n        return \"Level\";\n    }\n\n    getCridColumn() {\n        return \"ClientRequestId\";\n    }\n\n    constructor(data: V2Frames) {\n        const dataTables: V2DataSetTableFrame[] = [];\n        let dataSetHeader: V2DataSetHeaderFrame | null = null;\n        let dataSetCompletion: V2DataSetCompletionFrame | null = null;\n        data.forEach((frame) => {\n            switch (frame.FrameType) {\n                case \"DataTable\":\n                    dataTables.push(frame);\n                    break;\n                case \"DataSetHeader\":\n                    dataSetHeader = frame;\n                    break;\n                case \"DataSetCompletion\":\n                    dataSetCompletion = frame;\n                    break;\n            }\n        });\n\n        super(dataTables);\n        this.dataSetHeader = dataSetHeader;\n        this.dataSetCompletion = dataSetCompletion;\n        this.version = \"2.0\";\n    }\n}\n"]}